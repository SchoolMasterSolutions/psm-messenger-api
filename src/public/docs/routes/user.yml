definitions:
  User:
    type: object
    required:
      - category
      - email
      - given_name
      - family_name
    properties:
      category:
        type: string
        description: User category
        enum:
          - staff
          - parent
          - admin
      email:
        type: string
        description: A summary of the feature under which the user falls

      preferred_username:
        type: string
        description: Defaults to email address

      given_name:
        type: string
        description: The user's given name or first name

      middle_name:
        type: string
        description: The user's middle name

      family_name:
        type: string
        description: The user's family name or last name

      profile:
        type: string
        description: A brief description about the user

      date_of_birth:
        type: string
        description: Date of birth. It's optional

parameters:
  id:
    in: path
    type: string
    required: true
    name: id
    description: User Id

  search:
    in: query
    type: string
    required: true
    name: search
    description: Search keyword

  body:
    in: body
    type: object
    required: true
    name: body
    description: User object
    schema:
      $ref: "#/definitions/User"

paths:
  /api/user:
    post:
      tags:
        - User
      summary: Create user
      description: This allows creation of a new user
      consumes: application/json
      produces: application/json
      parameters:
        - $ref: "#/parameters/body"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/User"
        500:
          description: internal server error

    get:
      tags:
        - User
      summary: Search a user
      description: Searches users based on a given search criteria
      produces: application/json
      parameters:
        - $ref: "#/parameters/search"
      responses:
        200:
          description: A list of all users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: No users found
        500:
          description: internal server error

  /api/user/{id}:
    get:
      tags:
        - User
      summary: Get user details
      description: Gets the details of a user by id
      produces: application/json
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: User details
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          description: internal server error

    put:
      tags:
        - User
      summary: Update a user
      description: Use this endpoint if you want to update a user
      produces: application/json
      parameters:
        - $ref: "#/parameters/id"
        - $ref: "#/parameters/body"

      responses:
        200:
          description: Returns the user that has been updated
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          description: internal server error

    delete:
      tags:
        - User
      summary: Delete a user
      description: Deletes a user
      produces: application/json
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
        500:
          description: internal server error
