definitions:
  User:
    type: object
    required:
      - email
      - given_name
      - family_name
    properties:
      _id:
        type: string
        description: Unique identfier of the user

      category:
        type: array
        description: Specifies if the user is a parent, teacher or admin
        items:
          enum:
            - parent
            - teacher
            - admin

      affiliations:
        type: array
        description: Schools that the user is affiliated to
        items:
          type: object
          properties:
            school_id:
              $ref: "#/definitions/School/properties/_id"
            category:
              type: string
              description: User category
              enum:
                - staff
                - parent
                - student

      children:
        type: array
        description: Students for which the user is a parent or guardian
        items:
          type: object
          properties:
            student_id:
              $ref: "#/definitions/Student/properties/_id"
            school_id:
              $ref: "#/definitions/School/properties/_id"
            relationship:
              type: string
              description: The relationship the user has with the student
              enum:
                - father
                - mother
                - brother
                - sister
                - guardian

      account:
        type: object
        description: Login account details
        properties:
          preferred_username:
            type: string
            description: Defaults to email address
          password:
            type: string
            format: password
            description: User password
            minLength: 8

          is_active:
            type: boolean
            description: Indicates if the user account is active or not
            default: true

      profile:
        type: object
        description: User profile
        properties:
          email:
            type: string
            description: User's email address

          name:
            type: string
            description: The user's full name

          date_of_birth:
            type: string
            description: Date of birth. It's optional

parameters:
  _id:
    in: query
    type: string
    required: true
    name: _id
    example: 57694bdc-4609-4500-ae91-48ba98ea8ba4
    schema:
      $ref: "#/definitions/User/properties/_id"

  user_name:
    in: query
    type: string
    name: name
    example: Eliana
    description: Full text search by name
    schema:
      $ref: "#/definitions/User/properties/profile/properties/name"

  category:
    in: query
    type: string
    enum:
      - teacher
      - parent
      - student
    name: category
    example: parent
    description: Search by user category

  school_id:
    in: query
    type: string
    name: school_id
    description: Search by school id
    example: 57694bdc-4609-4500-ae91-48ba98ea8ba4

  user_object:
    in: body
    type: object
    required: true
    name: user
    description: User object
    schema:
      $ref: "#/definitions/User"

paths:
  /api/user:
    post:
      tags:
        - Users
      summary: Add
      description: This allows creation of a new user
      consumes: application/json
      produces: application/json
      parameters:
        - $ref: "#/parameters/user_object"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/User"
        500:
          description: internal server error

    get:
      tags:
        - Users
      summary: Search
      description: Searches users based on a given search criteria
      produces: application/json
      parameters:
        - $ref: "#/parameters/user_name"
        - $ref: "#/parameters/_id"
        - $ref: "#/parameters/school_id"
        - $ref: "#/parameters/category"
      responses:
        200:
          description: A list of all users
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        404:
          description: No users found
        500:
          description: internal server error

  /api/user/{_id}:
    put:
      tags:
        - Users
      summary: Update
      description: Use this endpoint if you want to update a user
      produces: application/json
      parameters:
        - $ref: "#/parameters/_id"
        - $ref: "#/parameters/user_object"

      responses:
        200:
          description: Returns the user that has been updated
          schema:
            $ref: "#/definitions/User"
        404:
          description: User not found
        500:
          description: internal server error

    delete:
      tags:
        - Users
      summary: Delete
      description: Deletes a user
      produces: application/json
      parameters:
        - $ref: "#/parameters/_id"
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
        500:
          description: internal server error
